language: cpp
sudo: false
dist: trusty

notifications:
  webhooks: 
    - secure: "jPW63N8mmDanG8WkMiq1tdpfOz+F85W5/iAtupntrbO93dSLv8eNEhIfH1yQNE8ezKx3DRO8VJcu4wRHZb3U5sNjBTp23u7UWqsWPgvvO5vcNrPboxDpDizEiptF2W6kejQptR/LD5Yo+VqAw6Y40ldSCIcQakfiyyQ2H5bsXg9nHvZP1s0jOGx4DBJxL2JhZ2Q1nijEPetWczp2ji17yxgieTGBUCIimcQTqgsGbbdWNYqEDyFHmErgoHJIYhQGryvjGK+FYrDbCKtqKypFG/nWFLgEsE09PfhRCZ0Gb5yBne9iMxCgKi8yREJhlF9gotXtuJdWRyr7/0n4M47GljqIVaz3QRFqEfd93K+3is2BwhkhKqC1JL8SSX1gohpnOGUsSm3ENMNN3GChhcmhFS6tYNg0BJjRPn8otEaUY3y4i/cy6S/4SZngziCA+ufZLffX9r7p3TYp/s/916gnZakBw3q9ZlGfUV0rOt2MGbksKti1uEcySRwkip9mLp0Ni7iKkmJBzTqfISXPBK18rVOT4t+4bEphtf/OURY8b+Cbxw/lqtIQnYpNfNoPNfphGn3+wyxPx1Qq4A7oiGz0Pe08kX+gygNctWCPCD9la9Sd85p6kfviUqFjbZcGj09YyOx/h3dYYOq5TqyF07vNXoF+yQjFBuOcIv+X87G5uQc="
  on_success: change
  on_failure: always
  on_start: change
  on_cancel: always
  on_error: always

matrix:
  include:
    # 1/ Linux Clang Builds
    - os: linux
      compiler: clang
      addons: &clang35
        apt:
          sources: ['llvm-toolchain-precise-3.5', 'ubuntu-toolchain-r-test']
          packages: ['cmake', 'clang-3.5']
      env: COMPILER='clang++-3.5' BUILD_TYPE='Release'

    - os: linux
      compiler: clang
      addons: *clang35
      env: COMPILER='clang++-3.5' BUILD_TYPE='Debug'

    - os: linux
      compiler: clang
      addons: &clang36
        apt:
          sources: ['llvm-toolchain-precise-3.6', 'ubuntu-toolchain-r-test']
          packages: ['cmake', 'clang-3.6']
      env: COMPILER='clang++-3.6' BUILD_TYPE='Release'

    - os: linux
      compiler: clang
      addons: *clang36
      env: COMPILER='clang++-3.6' BUILD_TYPE='Debug'

    - os: linux
      compiler: clang
      addons: &clang37
        apt:
          sources: ['llvm-toolchain-precise-3.7', 'ubuntu-toolchain-r-test']
          packages: ['cmake', 'clang-3.7']
      env: COMPILER='clang++-3.7' BUILD_TYPE='Release'

    - os: linux
      compiler: clang
      addons: *clang37
      env: COMPILER='clang++-3.7' BUILD_TYPE='Debug'

    # 2/ Linux GCC Builds
    - os: linux
      compiler: gcc
      addons: &gcc48
        apt:
         sources: ['ubuntu-toolchain-r-test']
         packages: ['cmake', 'g++-4.8']
      env: COMPILER='g++-4.8' BUILD_TYPE='Release'

    - os: linux
      compiler: gcc
      addons: *gcc48
      env: COMPILER='g++-4.8' BUILD_TYPE='Debug'

    - os: linux
      compiler: gcc
      addons: &gcc49
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['cmake', 'g++-4.9']
      env: COMPILER='g++-4.9' BUILD_TYPE='Release'

    - os: linux
      compiler: gcc
      addons: *gcc49
      env: COMPILER='g++-4.9' BUILD_TYPE='Debug'


    - os: linux
      compiler: gcc
      addons: &gcc5
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['cmake', 'g++-5']
      env: COMPILER='g++-5' BUILD_TYPE='Release'

    - os: linux
      compiler: gcc
      addons: *gcc5
      env: COMPILER='g++-5' BUILD_TYPE='Debug'

    # 3/ OSX Clang Builds
    - os: osx
      osx_image: xcode6.4
      compiler: clang
      env: COMPILER='clang++' BUILD_TYPE='Debug'

    - os: osx
      osx_image: xcode6.4
      compiler: clang
      env: COMPILER='clang++' BUILD_TYPE='Release'

    # 4/ Coverage Build
    - os: linux
      compiler: gcc
      addons: 
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['cmake', 'g++-4.9', 'lcov']
      env: 
        - |
          COMPILER='g++-4.9' BUILD_TYPE='Debug' CHECK_COVERAGE='On'
          CC_TEST_REPORTER_ID=9dc79ec67e0d8ace1a24b2fa04db9ecfa91a9c7e838c9790d5833d42f1dac663
          GIT_COMMITTED_AT=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then git log -1 --pretty=format:%ct; else git log -1 --skip 1 --pretty=format:%ct; fi)

    # 5/ AMLC Build
    - os: linux
      compiler: gcc
      addons: 
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['cmake', 'cmake-data', 'g++-4.9']
      env: 
        - |
          COMPILER='g++-4.9' AMLC='On' BUILD_TYPE='Debug'
    - os: linux
      compiler: gcc
      addons: 
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['cmake', 'cmake-data', 'g++-4.9']
      env: 
        - |
          COMPILER='g++-4.9' AMLC='On' BUILD_TYPE='Release'

before_install:
  - |
    set -e
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew update
      brew outdated cmake || brew upgrade cmake
    fi
    if [[ "${CHECK_COVERAGE}" == "On" ]]; then
      pip install --user cpp-coveralls
      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      chmod +x ./cc-test-reporter
    fi
    set +e

before_script:
  - |
    set -e
    export CXX=${COMPILER}
    cd ${TRAVIS_BUILD_DIR}
    if [[ "${CHECK_COVERAGE}" == "On" ]]; then
      cmake -H./ -BBuild -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DTASK_BACKEND=gccasm -DCHECK_COVERAGE=On
    elif [[ "${AMLC}" == "On" ]]; then
      cmake -H./ -BBuild -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DTASK_BACKEND=gccasm -DAMLC=On
    else
      cmake -H./ -BBuild -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DTASK_BACKEND=gccasm
    fi
    cd Build
    set +e

script:
  - |
    set -e
    make -j 2
    if [[ "${CHECK_COVERAGE}" == "On" ]]; then
      ../cc-test-reporter before-build
      make coverage
    else
      ctest -V --timeout 300
    fi
    set +e

after_success:
  - |
    set -e
    if [[ "${CHECK_COVERAGE}" == "On" ]]; then
      coveralls -r ../ -b . -E '/usr/.*' -E '.*/catch.hpp' -E '.*/externals/.*' -E '.*/CMakeFiles/.*'
      cp ./src/private/CMakeFiles/avm.dir/*.gcov ./ 
      ../cc-test-reporter after-build --exit-code $TRAVIS_TEST_RESULT
    fi
    set +e